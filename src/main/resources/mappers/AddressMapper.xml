<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.choco.mapper.AddressMapper">
	<resultMap id="BaseResultMap" type="org.choco.bean.Address">
		<id column="addid" property="addid" jdbcType="VARCHAR" />
		<result column="qx" property="qx" jdbcType="VARCHAR" />
	</resultMap>

	<resultMap id="BoxesResultMap" type="org.choco.bean.Box">
	</resultMap>


	<sql id="Base_Column_List">
		address, addqr, longitude, latitude
	</sql>

	<select id="selectAll" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from address_tbl
		order by addid asc
	</select>


	<select id="getBoxList" resultMap="BoxesResultMap">
		select
		box_name,
		address,
		longitude as longitude,
		latitude as latitude
		from box_tbl
		where 1 = 1
		<if test="zoneName != null">
			and zone_name like
			concat(concat("%",#{zoneName}),"%")
		</if>
		<if test="boxName != null">
			and box_name like
			concat(concat("%",#{boxName}),"%")
		</if>
	</select>



	<select id="getAddressByKeyword" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from address_tbl
		where 1 = 1
		<if test="kw0 != null">
			and address like
			concat(concat("%",#{kw0}),"%")
		</if>
		<if test="kw1 != null">
			and address like
			concat(concat("%",#{kw1}),"%")
		</if>
		<if test="kw2 != null">
			and address like
			concat(concat("%",#{kw2}),"%")
		</if>
	</select>

	<select id="getNearbyBox" resultMap="BoxesResultMap">
		SELECT
		box_name,
		address,
		longitude,
		latitude,
		round(acos(
		cos( #{latitude,jdbcType=DOUBLE} * pi( ) / 180 ) * cos( latitude * pi(
		) / 180 ) * cos( #{longitude,jdbcType=DOUBLE} * pi( ) / 180- longitude *
		pi( ) / 180 ) + sin(#{latitude,jdbcType=DOUBLE} * pi( ) / 180 ) * sin(
		latitude * pi( ) / 180 )
		) * 6370996.81, 2) AS distance
		FROM
		box_tbl
		where
		acos(
		cos( #{latitude,jdbcType=DOUBLE} * pi( ) / 180 ) * cos( latitude
		*
		pi( ) / 180 ) * cos( #{longitude,jdbcType=DOUBLE} * pi( ) / 180-
		longitude * pi( ) / 180 ) + sin(#{latitude,jdbcType=DOUBLE} * pi( ) /
		180 ) * sin( latitude * pi( ) / 180 )
		) * 6370996.81 <![CDATA[<= ]]>
		300
		ORDER BY
		distance ASC limit 3
	</select>
</mapper>